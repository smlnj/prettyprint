prettyprint/doc/device-notes.txt

This note discusses the nature and use of _devices_ of various classes.
Initially there are two devices classes: plain and ANSIterm, where the default
device class is defined by the structure PlainDevice (src/device/device-plain.sml).

Also, more generally, we discuss the general notion of a "device" and how they relate
to the notion of a "style".  Version 4 covers the device/style notions used in
Version 10.2 of the library.

Since the plain device class is trivial (type style = unit), this note concentrates
on the other, non-trivial, class of devices, implemented by ANSITermDevice.

These notes cover ANSI terminal "device class" implementation for 
for PrettyPrint Versions 9.1 through 10.2.

ANSI terminal escape codes are taken as defined under "ANSI escape codes" in Wikipedia.

The ANSI terminal is taken to be the prototypical (nontrivial) device.  The only other
"device" we have is the trivial device without styles (or supporting only a single default
style).

========================================================================================== 
General Observations
==========================================================================================
An ANSI terminal has a state that can be viewed as a set/sequence of "modes". This state
controls the rendering of text (and the BG color against which text is rendered).
[So the terminal device can be modeled as an _object_ containing functions that act on
this internal state.]

Does it make sense to output ANSI terminal transition codes to a file?  I Assume not!

========================================================================================== 
Review of ANSI terminal codes and functions
==========================================================================================

This section reviews the "style constructors" of the ANSITerm structure
(smlnj-lib/Util/ansi-term.sml), the ANSI escape codes they translate to, and their
functions [from the ANSI escape codes Wikipedia page,
https://en.wikipedia.org/wiki/ANSI_escape_code].

Many of the ANSI escape codes have to do with cursor positioning (useful for writing
a "visual" text editor like emacs), but here we are only interested in the subset of
codes (the SGR - "Select Graphic Rendition" codes) that control the display attributes for
rendering text characters.

Color codes (c):

Black	     0
Red	     1
Green	     2
Yellow 	     3
Blue	     4
Magenta	     5
Cyan	     6
White	     7
Default	     9

Attribute transition command codes (specified for ANSITerm.style):

RESET        0         set to default state
FG c	     30+c      foreground color c
BG c	     40+c      background color c
BF 	     1
DIM	     2
NORMAL	     22        reset from bold or dim only to default
UL	     4
UL_OFF	     24
BLINK	     5
BLINK_OFF    25
REV	     7	       reverse; swap FG and BG colors
REV_OFF	     27
INVIS	     8         conceal
INVIS_OFF    28        reveal

The actual terminal command strings can combine multiple command codes. For instance
the command string

   "\027[1;31m"    (027 = octal 33 = escape character)

specifies boldface (BF = 1), followed by red foreground (FG Red = 31).

Note that the attribute codes serve as commands to change the state of the terminal
by setting or resetting attribute values.

The attribute set for a terminal can be classified as a tuple:

fg: color       [Default (terminal dependent, typically Black); FG color, RESET]
bg: color       [Default (terminal dependent, typically White); BG color, RESET]
bold: bool      [false; BF, NORMAL, RESET]
dim: bool       [false; DIM, NORMAL, RESET]
underline: bool [false; UL, UL_OFF, RESET]
blinking: bool	[false; BLINK, BLINK_OFF, RESET]
reverse*: bool	[false; REV, REV_OFF, RESET] 
conceal: bool	[false; INVIS, INVIS_OFF, RESET]

There are default FG and BG colors (e.g. typically white/black, or black/white)  
But note that the Default color can have different values, depending on context, i.e. whether
the color is foreground or background, e.g., for foreground, Default = Black, while for
background, Default = White (or the terminal's current background color).  Thus the
command "BG Default" will set the background to the terminal's default background color.
while "FG Default" will set the text to the terminal's default foreground color.

Some attribute commands are "orthogonal", such as [BF, FG Red], where the effect of both
can co-exist. Others are not orthogonal, such as [FG Red, FG Green], where the
effect of the later command overrides the effect of the earlier one.  The effect of
other combinations may be terminal dependend (e.g. [FG Green, INVIS]). In general,
interactions of commands depend on the terminal emulation and may be unexpected or hard
to predict.

* reverse (REV) is not really an attribute, since it is redundant given the actual
foreground and background.

[Editorial: BLINK, INVIS (conceal) are not very useful in prettyprinting and therefore should be
avoided. BG and REV are of dubious utility. Thus when prettyprinting, it is probably best to
restrict oneself to using bold, dim, underline, and foreground (only) color changes.]


========================================================================================== 
Some Principles
==========================================================================================

The modes of a terminal device are "additive".  A style specification can "add" bold to
the existing enabled text attributes, but there is no style that removes or cancels the
bold attribute, and similarly for the dim, underlined, and blinking attributes.

But color attributes (foreground and background) are not additive. A new color attibute
imposed by a style will override the existing color attribute (for foreground or
background).

The only way that an attribute can be reversed or reset is to leave the "span" or "scope"
of the attribute when leaving the corresponding span of a style that sets that attribute.

This means an attribute like boldface cannot be (locally) cancelled within the scope
of a nested style.  If a style specifies boldface, then all the text within the span
or scope of that style will be bold.

[This is partly justified by the fact that ANSITerm has no mode transition command for
turning off the bold attribute. We choose to treat the other non-color attribues (dim,
underlined, blinking), the same, even though ANSITerm provides commands for turning them
off (locally).]

========================================================================================== 
Version 1: tmode -- a terminal mode type
==========================================================================================

* Terminal mode

Terminal mode is a record of modes that a ANSIterm may be in, according to the smlnj-lib
ANSITerm structure.

The individual "modes" or "attributes" are:

fg : color  -- foreground color: default Black
bg : color  -- background color: default White
bf : bool   -- boldface
ul : bool   -- underlining
bl : bool   -- blinkiing
in : bool   -- invisible
dm : bool   -- dim

So the terminal mode is represented by the type

type tmode = {fg : color,  (* foreground color, default black *)
              bg : color,  (* background color, default white *)
	      bf : bool,   (* boldface? default false *)
	      ul : bool,   (* underlining? default false *)
	      bl : bool,   (* blinkiing? default false *)
	      dm : bool,   (* dim? default false *)
	      iv : bool}   (* invisible? default false *)

The mode components are assumed to be orthogonal, so that altering one component
of the mode does not affect the others. This does not quite work for invisible,
which (visibly) cancels the effect of, e.g., boldface. But if iv is changed from
true to false when bf is true, bf will remain true.

The default (and initial) terminal mode is

val default: tmode = {fg = Black, bg = White,
    	     	      bf = false, ul = false, bl = false, dm = false, iv = false}

The "device" corresponding to the output stream has a state variable

    val tmode : tmode ref

At any point in time, the value !tmode should accurately reflect the actual mode of the
terminal output stream.

To maintain consistency between the device tmode and the state of the terminal
outstream, when the device mode is changed, the state of the terminal output
stream should be changed correspondingly using the ANSITerm.setStyle, or
producing a "command string" using ANSITerm.toString and outputting that command
string to the terminal outstream.

* Style

A style value specifies that one component of the mode record should have a given value.

datatype style
  = FG of color   (* set foreground color *)
  | BG of color   (* set background color *)
  | BF (* boldface on *)
  | UL (* underline on *)
  | BL (* blinking on *)
  | DM (* dim on *)
  | IV (* invisible on *)

A style is associated with a particular format by the STYLE constructor:

  STYLE (style, format)

Here, the format is called the "scope" (or "scope format") of that style specification.

When rendered, the style is "applied" to the terminal, possibly changing its
tmode, but only while the format is being rendered (within the scope), after
which the affected component of the tmode reverts to is previous value.

Application of a style is "idempotent". That is, if a style specifies that a
mode component to set to the value that it already has, applying the style does
nothing, and reverting the mode at the end of rendering the corresponding format
(i.e. when leaving its "scope") also does nothing.

Styles are inherited or "cascading", in the sense that the current tmode is the
result of the tmode settings specified by all the enclosing STYLE formats, i.e.
the style settings that are "in scope".

Entering a SYLE format changes at most one component of the tmode record.


* Managing the "scope" of a style specification.

When rendering a format of the form STYLE (style, format), we do the following:

(1) create two functions, apply and revert, that when executed will "set" the
appropriate mode of the terminal stream, and also update the device tmode
reference.

(2) Execute apply () to (possibly) change the tmode (entering scope).

(3) Execute a rendering thunk for format.

(4) Execute revert () to restore the tmode state (of the terminal stream, and
the device) on leaving the scope of the style specification (style format).


(* mkApplyRevert (* style: *) style * (* tmode: *) tmode -> 
fun mkApplyRevert (style, tmode) = 


Note: The style datatype of ANSITerm defines a set of "commands" that are used
to change the tmode of the terminal output stream.

Note: All of this only applies to ANSI terminal output streams, like
TextIO.stdOut. The property of being a terminal output stream is considered to
be an intrinsic property of the stream, which is assumed and cannot be changed.


========================================================================================== 
Version 2: ANSITerm device (with terminal mode "state" variables)
==========================================================================================

* Terminal mode state is represented by 8 refs instead of a ref to a "tmode" record:

(* terminal mode state *)
val fg : color ref = ref Black  (* foreground color, default black *)
val bg : color ref = ref White  (* background color, default white *)
val bf : bool ref = ref false   (* boldface? default false *)
val ul : bool ref = ref false   (* underlining? default false *)
val bl : bool ref = ref false   (* blinkiing? default false *)
val dm : bool ref = ref false   (* dim? default false *)
val iv : bool ref = ref false   (* invisible? default false *)
val rv : bool ref = ref false   (* reverse fg/bg colors? default false *)

* applyStyle : ANSITermStyle.style -> (unit -> unit) option

applyStyle (style, format):

    -- updates the corresponding terminal mode variable and sends the
       appropriate command string to terminal to change its mode accordingly,
       _if_ the style causes a change in terminal mode (e.g. if style = BF
       and !bf = false, in which case !bf is changed to true and the terminal
       BF mode is turned on by sending the string generated by ANSITerm.FG).

    -- if the style caused a change in terminal mode, returns a (SOME revert) where
       "revert" is a function that will revert the state and undo the
       terminal mode change. If the style did not change the terminal mode,
       returns NONE (e.g. if style = BF and !bf = true, so no reversion is necessary).

It is assumed that the state variables are always kept in sync with the mode of the
terminal outstream.

Note: If we were in a multithreaded context where outstream was a shared
resource, we would need to use some synchronization technique to guard against
simultaneous attemps to change the terminal mode.  Here we assume we are in a
single-threaded context.

This is implemented in src91/term/device.sml.

Note: This does not yet implement the "NOEMPH" style, which would
presumably (within its "scope") reset the terminal to default mode for
the format render and then restore the former mode.  This would mean
capturing the former terminal mode as a record (of type tmode, as
above), and the revert function would set the terminal mode to agree
with saved tmode record.

FIXED: Support for the NOEMPH style constructor has now been implemented by
adding capability to "reset" the terminal mode state (on entry to
NOEMPH style scope) and to "revert" the terminal mode state (on exit
from NOEMPH style scope). This was done be adding "backup" veriables
for each terminal mode variable (e.g. bu_bf for bf) where the current
value of the variable (bf) could be stored by resetTerm and restored
by revertTerm.


========================================================================================== 
Version 3: generic string styles and devices (PlainDevice, ANSITermDevice)
==========================================================================================

In Prettyprint Version 10.1, the generic style type is just string,
and the interpretation of strings is left to a "device", in particular
a function renderStyled that is a component of a device records.

A device is a record value, of the type device as defined in src/device/device-type.sml:

type device
  = {lineWidth : int,
     space  : int -> unit,
     indent : int -> unit,
     newline : unit -> unit,
     string : string -> unit,
     token : Token.token -> unit,
     flush : unit -> unit,
     renderStyled : Style.style * (unit -> renderState) -> renderState}

where the type renderState describes the internal "state" of the
render function during rendering (it is actually int * bool).

A device has a lineWidth attribute measured in monospace characters
(defaulting to 80 characters). It also has a set of output functions
(space, string, newline, indent, etc.) that produce output and are
called during the rendering process (so rendering does the printing
directly without producing an intermediate "layout" data structure).

When a STYLE format (STYLE (style, format)) is rendered, the style
string is passed to renderStyled, which will translate it internally
to a style appropriate to the given device.

There are (initially) only two kinds of devices:

  (1) plain text devices (produced by PlainDevice.mkDevice)
  (2) ANSI terminal devices (produced by ANSITermDevice.mkDevice)

The mkDevice functions have the type

    mkDevice : TextIO.outstream -> int -> device

where the outstream is the outstream to be used for output, and the
int is the (soft) lineWidth limit.

==========================================================================================
Version 4 (Prettyprint version 10.2)
==========================================================================================
We need two notions of style: _logical_ and _physical_.

* Logical styles

Logical styles are universally represented by strings, e.g. "keyword". The set of logical
styles is determined by the writer of a formatter and this set is designed to be
appropriate to the subject matter (i.e. type) that is being formatted.

These logical style strings appear in the generated formats (as arguments of the STYLE
constructor).

* Physical (or "device") styles

Physical styles are associated with a device (more precisely a device class), like ANSI
terminal, and they describe the text stylings that that device supports.  Thus if ANSITerm
is a device (module), then the type ANSITerm.style determines what "physical" styles that
device is capable of (e.g. bold face, red, flashing).  In the case of an ANSI terminal
device, these correspond to physical modes (state) of the terminal that modify the
rendering of text.

* Rendering logical styles

When rendering a format to a device, logical styles have to be translated to
device-specific physical styles.  This translation is represented by a function
mapping logical styles (strings) to physical styles for the device being rendered to.

* Nested ("cascading") styles

Logically, a styled format can contain other styled formats within them. This assumes
that the corresponding physical styles are "additive" or consistent.  For instance,
with a bold-face styled format we might in addition impose a "red-face" on some subformat.

It is possible that for some device (class), some physical styles might be inconsistent.
(e.g. it might not be possible for text to be both bold and italic).

We generally assume that physical styles are "orthogonal" and don't conflict with one
another.

There is also the question about whether an inner style might "cancel" the inherited
style (the next innermost style), or perhaps all inherited styles.

If some nested (physical) styles are incompatible, then the effect of such combinations
of styles may be undefined or unexpected.  (What exactly will go wrong?)

If a (physical) style can "cancel" previously imposed styles (e.g. NOSTYLE for ANSI term),
one also needs to consider whether all inherited styles are cancelled, or perhaps only
some of them.

Another issue is that we want styles to a applied on entering a styled format, and then
undone, or reversed, upon leaving that format. This means that (logical) styles need to be
cancelled when leaving the "scope" of the style.

-----------
As in version 10.1, devices are values.

When rendering a format, a device is passed to handle:
  (1) output of characters, and (text, breaks, indentation)
  (2) implementation of physical (i.e. device) styles

Since the format being rendered contains _logical_ styles, rendering also requires
a map from _logical_ style strings to physical/device styles.

-----------
The renderStyled function requires that physical styles can be applied (during
execution of the thunk argument) and then "cancelled" once the thunk has finished
being executed (being "forced").

-----------
To make it possible to define a map from logical styles (strings) to physical (device)
styles, the structure implementing a device class must export a concrete device style
type.

Given that logical styles can be nested (can "cascade"), the physical styles they map to
must also "cascade".  What does this mean?

Suppose we have logical styles "red" and "green", and consider the format:

   STYLE ("red", hblock [text "abc", STYLE ("green", text "def"), text "ghi"])

and supposed the "red" and "green" logical styles map to the corresponding colors for
an ANSI terminal. Then we expect "abc" and "ghi"  to be rendered in red, while "def" is
rendered in green. That is, we ssume that the inner green style should _override_ the
outer red style, rather than trying to _blend_ the red and green colors.

But what if we replace "red" and "green" by "italic" and "bold", and what if the device
supports "bold italic" rendering of text?  In that case, the inner "bold" style could
be combined or blended with the outer italic style, resulting in "italic bold" styling
of the "def" text.

In light of this, it is not clear how to combine overlapping, nested styles. Should inner
styles override outer styles, or should there be a systematic way of "blending" physical
styles.

Even assuming an overriding discipline for nested styles, it seems clear that the
overridden style should be restored when leaving the span of the inner style (so in the
example, "ghi" should be rendered as red).  So when we "cancel" the inner style, we must
simultaneously "restore" the outer (or "inherited" or "cascading") style.

A general, "device independent" implementation of the overriding discipline seems to
require an active restoration process to restore all outer stylings on leaving the span
of a nested style.  In the case of an ANSI terminal, we could save the state (modes) of
the terminal on entering a style scope and restore that state on leaving the scope.
In this special case, there may be some style modes that can simply be "cancelled"
irrespective of inherited styles (i.e. there might be shortcuts to restoration of
inherited styles).


* Cascading

PP styles are very simple compared with HTML cascading style sheets (CSS). But there is
still an issue of how "cascading" of nested styles works, at least if we allow structured
formats to be styled, which introduces the possibility that a styled format may contain
internal/nested styled formats.

An alternative would be to restrict styles to atomic text formats, in which case the
style attribute could be associated with the TEXT format constructor instead of being
an orthogonal format modifier constructore (e.g. STYLE).

What happens when outer and inner styles are specified


   style (X, <a... style (Y, <b...>) c...>)

We assume that style X applies to the a... and c... portions of the format argument
(deliniated by <...>).

What style applies to the format <b...>?  Is it simply Y, or is it a blending or merger
of X and Y?  It is in a blending, what are the rules for blending?
Presumably blending is performed at the device style level.  For instance, style elements
(or "modes") red and italic could be combined to produced red italic text.  One could also
combine type face styles, e.g. bold and italic.  But we probably do not want to combine
color styles (e.g. red and green producing brown text).

Dependence on typeface and associated fonts
--------------------------------------------

[ANSI terminal] Whether italic and bold modes can be "blended" to get bold italic text
may depend on whether the terminal typeface comes with a bold italic font.

NOTE: italic is generally not supported by ANSI terminal emulators


--------------------------------------------------------------------------------
Experiments with ANSI terminals (aquamacs (E) macOS terminal (M), Ubuntu xterm (U))

Q: what code is sent for the NORMAL transition?
   RESET sends the 0 code (for the reset function).

Some transitions (BLINK, UL, REV, INVIS) have corresponding OFF transition commands to
undo them specifically.  Other "modes" depend on the RESET transition to undo themselves.

Ubuntu xterm:
  - NORMAL undoes BF, DIM; but not FG color, UL, REV, BLINK (expected)
  - RESET undoes BF, DIM, UL, REV, INVIS restores default FG, BF colors (expected)
  - [REV, FG Green] produces green background, black text. After a REV command, the
    effects of FG and BG are reversed.

macOS terminal:
  - BF produces bold face, but also turns FG color to maroon and resets FG Default color
    to maroon.  Have to use FG Black to get black boldface.
  - REV and INVIS seem to be implemented
  - After a REV, the effects of FG and BG are reversed.
 

aquamac:
  - effect of bold is very slight
  - REV by itself has the same effect as FG Red and does not affect the background color 
  - INVIS, REV not (properly) implemented, but these commands may interact with and change
    the behavior of other commands (e.g.[FG Green, REV] changes the FG to Red and leaves
    the BG color unchanged; [FG Green, INVIS] does not change the FG color).
   

